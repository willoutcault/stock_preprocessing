```{r setup, include=FALSE}
require(shinydashboard)
require(DT)
require(shiny)
require(tidyverse)
require(timeDate)
require(googlesheets4)
require(forecast)
require(xts)
require(scales)
require(ggplot2)
require(e1071)
require(caTools) 

sheet <- "Market Data Backup"
raw_df <- read_sheet("https://docs.google.com/spreadsheets/d/1ig3mbe43WIVZbHNuTI70AYLih4WryOqm6KujYc4bUeM/edit#gid=555070615", sheet=sheet)
raw_df[,2:length(raw_df)] <- sapply(raw_df[,2:length(raw_df)], str_remove_all, ",")
raw_df[,2:length(raw_df)] <- sapply(raw_df[,2:length(raw_df)], as.numeric)
raw_df <- raw_df[ , colSums(is.na(raw_df)) == 0]

dates <- unique(as.Date(raw_df$time))
stocks <- colnames(raw_df[,2:ncol(raw_df)])
```

```{r}
    create_features <- function(training_set){
        
        training_set <- data.frame(lapply(training_set, log))
        training_set <- data.frame(lapply(training_set, diff))
        
        training_set$sma60 <- sma(training_set[,1], 60)
        training_set$sma30 <- sma(training_set[,1], 30)
        training_set$sma20 <- sma(training_set[,1], 20)
        training_set$sma15 <- sma(training_set[,1], 15)
        training_set$sma10 <- sma(training_set[,1], 10)
        training_set$sma5 <- sma(training_set[,1], 5)
        
        training_set$ema60 <- ema(training_set[,1], 60)
        training_set$ema30 <- ema(training_set[,1], 30)
        training_set$ema20 <- ema(training_set[,1], 20)    
        training_set$ema15 <- ema(training_set[,1], 15)
        training_set$ema10 <- ema(training_set[,1], 10)
        training_set$ema5 <- ema(training_set[,1], 5)
        
        training_set$direction <- NA
        for (i in seq(2,nrow(training_set),1)){
            if (training_set[i,1] > 0){
                training_set$direction[i-1] <- "UP"
            }
            if (training_set[i,1] == 0){
                training_set$direction[i-1] <- "NOCHANGE"
            }
            if (training_set[i,1] < 0){
                training_set$direction[i-1] <- "DOWN"
            }
        }
        
        training_set[complete.cases(training_set),]
    }
```

```{r}
df <- raw_df %>% 
    filter(as.Date(time)==dates[2]) %>% 
    select(stocks[1])

df <- create_features(df)

training_set <- df[1:round(nrow(df)*.75, 0),] 
test_set <- df[(round(nrow(df)*.75, 0)+1):nrow(df),]


x <- training_set[,-ncol(training_set)]
y <- as.factor(training_set$direction)

#model_tuner <- tune(svm, train.x=x, train.y=y,
#                   ranges = list(gamma = 2^(-1:1), cost = 2^(2:4)),
#                   kernel = 'linear',
#                   tunecontrol = tune.control(nrepeat = 10, sampling = "cross", cross = 10))

classifier = svm(formula = direction ~ ., 
               data = training_set, 
               type = 'C-classification',
               kernel ='linear'
#               cost = model_tuner$best.model$cost,
#               gamma = model_tuner$best.model$gamma
               )


results <- data.frame("Actual" = test_set$direction)
results$Predicted <- "NA"

for (i in seq(1,nrow(test_set), 1)){
  
  results$Predicted[i] <- as.character(predict(classifier, test_set[1,-ncol(test_set)]))
  training_set <- rbind(training_set, test_set[1,])
  test_set <- test_set[-1,]
  
classifier = svm(formula = direction ~ ., 
               data = training_set, 
               type = 'C-classification',
               kernel ='linear'
#               cost = model_tuner$best.model$cost,
#               gamma = model_tuner$best.model$gamma
            )
}

table(results$Predicted, results$Actual)

mean(results$Predicted==results$Actual)
```
