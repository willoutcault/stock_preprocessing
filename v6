---
title: "Untitled"
author: "Will Outcault"
date: "11/16/2020"
output: html_document
---

```{r}
require(shinydashboard)
require(ROSE)
require(DT)
require(shiny)
require(tidyverse)
require(timeDate)
require(googlesheets4)
require(forecast)
require(xts)
require(scales)
require(ggplot2)
require(e1071)
require(caTools) 
require(QuantTools)

sheet <- "Market Data Backup"
raw_df <- read_sheet("https://docs.google.com/spreadsheets/d/1ig3mbe43WIVZbHNuTI70AYLih4WryOqm6KujYc4bUeM/edit#gid=555070615", sheet=sheet)
raw_df[,2:length(raw_df)] <- sapply(raw_df[,2:length(raw_df)], str_remove_all, ",")
raw_df[,2:length(raw_df)] <- sapply(raw_df[,2:length(raw_df)], as.numeric)
raw_df <- raw_df[ , colSums(is.na(raw_df)) == 0]
raw_df <- raw_df[ , -18]
```

```{r}
ts_filter <- function(raw_df, stock, dates, t){
    df <- raw_df %>% 
      filter(as.Date(time) %in% dates[seq(1,t,1)]) %>% 
      select(all_of(stock))
    df <- df[seq(1,nrow(df),t),]
    
}

consectutives <- function(training_set, n){
  
  training_set <- cbind(training_set, rep(NA, nrow(training_set)))
  training_set <- cbind(training_set, rep(NA, nrow(training_set)))
  training_set <- cbind(training_set, rep(NA, nrow(training_set)))
  
  for(i in seq(n, nrow(training_set), 1)){
    training_set[i,ncol(training_set)] <- sum(training_set$direction[seq(i-n,i-1, 1)]=="UP")
    training_set[i,ncol(training_set)-1] <- sum(training_set$direction[seq(i-n,i-1, 1)]=="DOWN")
    training_set[i,ncol(training_set)-2] <- sum(training_set$direction[seq(i-n,i-1, 1)]=="NOCHANGE")
  }
  training_set
}

create_features <- function(training_set){
    
    training_set <- data.frame(lapply(training_set, log))
    training_set <- data.frame(lapply(training_set, diff))
    
    training_set$sma30 <- sma(training_set[,1], 30)
    training_set$sma20 <- sma(training_set[,1], 20)
    training_set$sma15 <- sma(training_set[,1], 15)
    training_set$sma10 <- sma(training_set[,1], 10)
    training_set$sma5 <- sma(training_set[,1], 5)
    
    training_set$ema30 <- ema(training_set[,1], 30)     
    training_set$ema20 <- ema(training_set[,1], 20)    
    training_set$ema15 <- ema(training_set[,1], 15)
    training_set$ema10 <- ema(training_set[,1], 10)
    training_set$ema5 <- ema(training_set[,1], 5)
    
    training_set$direction <- NA
    for (i in seq(2,nrow(training_set),1)){
        if (training_set[i,1] > 0){
            training_set$direction[i-1] <- "UP"
        }
        if (training_set[i,1] == 0){
            training_set$direction[i-1] <- "NOCHANGE"
        }
        if (training_set[i,1] < 0){
            training_set$direction[i-1] <- "DOWN"
        }
    }
    
    column_names <- colnames(training_set)
    
    training_set <- consectutives(training_set, 30)     
    training_set <- consectutives(training_set, 20)    
    training_set <- consectutives(training_set, 15)
    training_set <- consectutives(training_set, 10)
    training_set <- consectutives(training_set, 5)
    
    colnames(training_set) <- append(column_names, c("UP30", "DOWN30", "NOCHANGE30",
                                                     "UP20", "DOWN20", "NOCHANGE20",
                                                     "UP15", "DOWN15", "NOCHANGE15",
                                                     "UP10", "DOWN10", "NOCHANGE10",
                                                     "UP5", "DOWN5", "NOCHANGE5"))
    
    training_set <- training_set[complete.cases(training_set),]
    training_set$direction <- as.factor(training_set$direction)
    training_set
}
```


```{r}
dates <- unique(as.Date(raw_df$time))
stock_names <- colnames(raw_df[,2:ncol(raw_df)])
results_df <- data.frame()
timestep <- seq(1,10,1)
stock_samples <- sample(stock_names, size=5, replace=T)
precision_df <- data.frame()

for (t in timestep){
  for (stock in stock_samples){
    
    #Filter Timestep/Stocks
    df <- ts_filter(raw_df, stock, dates, t)
    
    # Create Features
    df <- create_features(df)
    
    # Oversampling and Training/Testing 75/25 Split
    df1 <- filter(df, direction != "UP")
    df2 <- filter(df, direction != "DOWN")
    
    multiclass <- t==1
    
    if (multiclass){
      training_set1 <- ROSE(direction ~ ., df1, p=0.66, N=round(.375*nrow(df), 0))$data
      training_set2 <- ROSE(direction ~ ., df2, p=0.66, N=round(.375*nrow(df), 0))$data 
      training_set <- rbind(training_set1, training_set2)
      test_set <- df[!(df$sma20 %in% training_set$sma20), ]
    }
    
    if (!multiclass){
      smp_size <- floor(0.75 * nrow(df))
      train_ind <- sample(seq_len(nrow(df)), size = smp_size)
      training_set <- df[train_ind, ]
      test_set <- df[-train_ind, ]
    }
    
    # Get Model Parameters
    tuned_parameters <- tune.svm(direction~., data = training_set, kernel="polynomial", gamma = 10^(-5:1), cost = 10^(-3:1))
    
    # Train Model
    classifier <- svm(formula = direction ~ ., 
         data = training_set, 
         type = 'C-classification',
         kernel ='polynomial',
         cost = tuned_parameters$best.parameters$cost,
         gamma = tuned_parameters$best.parameters$gamma
    )
    
    #Stock Predictions
    results <- data.frame("Actual" = test_set$direction)
    results$Predicted <- as.character(predict(classifier, test_set[,-12]))
    
    #Record Stock Results in TS DF
    if (stock == stock_samples[1]){
      timestep_results <- results
      
    }
    if (stock != stock_samples[1]){
      timestep_results <- rbind(timestep_results, results)
    }
    
  }

  #Calculate TS Mean Accuracy and Table
  colnames(timestep_results) <- c("Actual", "Predicted")
  accuracy <- mean(timestep_results$Actual==timestep_results$Predicted, na.rm=T)
  Frequency <- table(timestep_results$Actual, timestep_results$Predicted)
  print(Frequency)
  print(accuracy)
  
  # Calculate Precision
  tab <- table(timestep_results$Actual, timestep_results$Predicted)
  TP <- tab[nrow(tab), ncol(tab)]
  FP <- tab[1, ncol(tab)]
  precision <- TP / (TP + FP)
  print(precision)
  precision_df <- rbind(precision_df, precision)
  colnames(precision_df) <- c("precision")
  
  # Bind TS Mean Accuracy to Results DF
  results_df <- rbind(results_df, accuracy)
  colnames(results_df) <- c("mean")
  
}
plot(seq(1,nrow(results_df),1), results_df$mean, xlab="Time-Step (min)", ylab="Accuracy", type = "b", main = "Accuracy")
plot(seq(1,nrow(precision_df),1), precision_df$precision, xlab="Time-Step (min)", ylab="Precision", type = "b", main = "Precision")
```
