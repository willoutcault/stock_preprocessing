---
title: "Untitled"
author: "Will Outcault"
date: "11/16/2020"
output: html_document
---

```{r setup, include=FALSE}
require(shinydashboard)
require(ROSE)
require(DT)
require(shiny)
require(tidyverse)
require(timeDate)
require(googlesheets4)
require(forecast)
require(xts)
require(scales)
require(ggplot2)
require(e1071)
require(caTools) 
require(QuantTools)

sheet <- "Market Data Backup"
raw_df <- read_sheet("https://docs.google.com/spreadsheets/d/1ig3mbe43WIVZbHNuTI70AYLih4WryOqm6KujYc4bUeM/edit#gid=555070615", sheet=sheet)
raw_df[,2:length(raw_df)] <- sapply(raw_df[,2:length(raw_df)], str_remove_all, ",")
raw_df[,2:length(raw_df)] <- sapply(raw_df[,2:length(raw_df)], as.numeric)
raw_df <- raw_df[ , colSums(is.na(raw_df)) == 0]
raw_df <- raw_df[ , -18]
```

```{r setup, include=FALSE}
dates <- unique(as.Date(raw_df$time))
stock_names <- colnames(raw_df[,2:ncol(raw_df)])
```

```{r}
ts_filter <- function(raw_df, stock, dates, t){
    df <- raw_df %>% 
      filter(as.Date(time) %in% dates[seq(1,t,1)]) %>% 
      select(all_of(stock))
    df <- df[seq(1,nrow(df),t),]
    
}

create_features <- function(training_set){
    
    training_set <- data.frame(lapply(training_set, log))
    training_set <- data.frame(lapply(training_set, diff))
    
    training_set$sma20 <- sma(training_set[,1], 20)
    training_set$sma15 <- sma(training_set[,1], 15)
    training_set$sma10 <- sma(training_set[,1], 10)
    training_set$sma5 <- sma(training_set[,1], 5)
    
    training_set$ema20 <- ema(training_set[,1], 20)    
    training_set$ema15 <- ema(training_set[,1], 15)
    training_set$ema10 <- ema(training_set[,1], 10)
    training_set$ema5 <- ema(training_set[,1], 5)
    
    training_set$direction <- NA
    for (i in seq(2,nrow(training_set),1)){
        if (training_set[i,1] > 0){
            training_set$direction[i-1] <- "UP"
        }
        if (training_set[i,1] == 0){
            training_set$direction[i-1] <- "NOCHANGE"
        }
        if (training_set[i,1] < 0){
            training_set$direction[i-1] <- "DOWN"
        }
    }
    
    training_set <- training_set[complete.cases(training_set),]
    training_set$direction <- as.factor(training_set$direction)
    training_set
}
```


```{r}
results_df <- data.frame()
timestep <- seq(1,6,1)
stock_samples <- sample(stock_names, size=5, replace=T)

for (t in timestep){
  for (stock in stock_samples){
    
    #Filter Timestep/Stocks
    df <- ts_filter(raw_df, stock, dates, t)
    
    # Create Features
    df <- create_features(df)
    
    # Oversampling and Training/Testing 75/25 Split
    df1 <- filter(df, direction != "UP")
    df2 <- filter(df, direction != "DOWN")
    multiclass <- 0.05 < mean(df$direction=="NOCHANGE", na.rm=T)
    
    if (t==1){
      training_set1 <- ovun.sample(direction ~ ., df1, method="both", p=0.33, N=125)$data
      training_set2 <- ovun.sample(direction ~ ., df2, method="both", p=0.33, N=125)$data 
      training_set <- rbind(training_set1, training_set2)
      test_set <- df[!(df$sma20 %in% training_set$sma20), ]
    }
    
    if (t==1){
      training_set1 <- ovun.sample(direction ~ ., df1, method="both", p=0.25, N=125)$data
      training_set2 <- ovun.sample(direction ~ ., df2, method="both", p=0.25, N=125)$data 
      training_set <- rbind(training_set1, training_set2)
      test_set <- df[!(df$sma20 %in% training_set$sma20), ]
    }
    
    if (t!=1){
      smp_size <- floor(0.75 * nrow(df))
      train_ind <- sample(seq_len(nrow(df)), size = smp_size)
      training_set <- df[train_ind, ]
      test_set <- df[-train_ind, ]
    }
    
    # Get Model Parameters
    tuned_parameters <- tune.svm(direction~., data = training_set, gamma = 10^(-5:1), cost = 10^(-3:1))
    
    # Train Model
    classifier <- svm(formula = direction ~ ., 
         data = training_set, 
         type = 'C-classification',
         kernel ='linear',
         cost = tuned_parameters$best.parameters$cost,
         gamma = tuned_parameters$best.parameters$gamma
    )
    
    #Stock Predictions
    results <- data.frame("Actual" = test_set$direction)
    results$Predicted <- as.character(predict(classifier, test_set[,-ncol(test_set)]))
    
    #Record Stock Results in TS DF
    if (stock == stock_samples[1]){
      timestep_results <- results
    }
    if (stock != stock_samples[1]){
      timestep_results <- rbind(timestep_results, results)
    }
    
  }
  
  #Calculate TS Mean Accuracy and Table
  colnames(timestep_results) <- c("Actual", "Predicted")
  mean <- mean(timestep_results$Actual==timestep_results$Predicted, na.rm=T)
  print(table(timestep_results$Actual, timestep_results$Predicted))
  print(mean)
  
  # Bind TS Mean Accuracy to Results DF
  results_df <- rbind(results_df, mean)
  colnames(results_df) <- c("mean")
  
}
plot(seq(1,nrow(results_df),1), results_df$mean)
```
